use ff::PrimeField;

#[derive(PrimeField)]
#[PrimeFieldModulus = "18446744069414584321"] // 2^64 - 2^32 + 1
#[PrimeFieldGenerator = "3"]
#[PrimeFieldReprEndianness = "little"]
pub struct Goldilocks([u64; 2]);

fn main() {
    // Change this

    let buf: [u8; 510] = [0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xcc,
0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x48,0x31,0xd2,0x51,
0x56,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,
0x52,0x20,0x4d,0x31,0xc9,0x48,0x0f,0xb7,0x4a,0x4a,0x48,0x8b,
0x72,0x50,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,
0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,
0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x66,0x81,
0x78,0x18,0x0b,0x02,0x0f,0x85,0x72,0x00,0x00,0x00,0x8b,0x80,
0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,
0x44,0x8b,0x40,0x20,0x50,0x49,0x01,0xd0,0x8b,0x48,0x18,0xe3,
0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,
0x31,0xc9,0x48,0x31,0xc0,0x41,0xc1,0xc9,0x0d,0xac,0x41,0x01,
0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,
0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,
0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,
0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,
0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,
0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x4b,
0xff,0xff,0xff,0x5d,0x49,0xbe,0x77,0x73,0x32,0x5f,0x33,0x32,
0x00,0x00,0x41,0x56,0x49,0x89,0xe6,0x48,0x81,0xec,0xa0,0x01,
0x00,0x00,0x49,0x89,0xe5,0x49,0xbc,0x02,0x00,0x00,0x50,0xc0,
0xa8,0x2d,0xba,0x41,0x54,0x49,0x89,0xe4,0x4c,0x89,0xf1,0x41,
0xba,0x4c,0x77,0x26,0x07,0xff,0xd5,0x4c,0x89,0xea,0x68,0x01,
0x01,0x00,0x00,0x59,0x41,0xba,0x29,0x80,0x6b,0x00,0xff,0xd5,
0x6a,0x0a,0x41,0x5e,0x50,0x50,0x4d,0x31,0xc9,0x4d,0x31,0xc0,
0x48,0xff,0xc0,0x48,0x89,0xc2,0x48,0xff,0xc0,0x48,0x89,0xc1,
0x41,0xba,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x48,0x89,0xc7,0x6a,
0x10,0x41,0x58,0x4c,0x89,0xe2,0x48,0x89,0xf9,0x41,0xba,0x99,
0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0x49,0xff,0xce,
0x75,0xe5,0xe8,0x93,0x00,0x00,0x00,0x48,0x83,0xec,0x10,0x48,
0x89,0xe2,0x4d,0x31,0xc9,0x6a,0x04,0x41,0x58,0x48,0x89,0xf9,
0x41,0xba,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,
0x55,0x48,0x83,0xc4,0x20,0x5e,0x89,0xf6,0x6a,0x40,0x41,0x59,
0x68,0x00,0x10,0x00,0x00,0x41,0x58,0x48,0x89,0xf2,0x48,0x31,
0xc9,0x41,0xba,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x48,0x89,0xc3,
0x49,0x89,0xc7,0x4d,0x31,0xc9,0x49,0x89,0xf0,0x48,0x89,0xda,
0x48,0x89,0xf9,0x41,0xba,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,
0xf8,0x00,0x7d,0x28,0x58,0x41,0x57,0x59,0x68,0x00,0x40,0x00,
0x00,0x41,0x58,0x6a,0x00,0x5a,0x41,0xba,0x0b,0x2f,0x0f,0x30,
0xff,0xd5,0x57,0x59,0x41,0xba,0x75,0x6e,0x4d,0x61,0xff,0xd5,
0x49,0xff,0xce,0xe9,0x3c,0xff,0xff,0xff,0x48,0x01,0xc3,0x48,
0x29,0xc6,0x48,0x85,0xf6,0x75,0xb4,0x41,0xff,0xe7,0x58,0x6a,
0x00,0x59,0x49,0xc7,0xc2,0xf0,0xb5,0xa2,0x56,0xff,0xd5];

    let mut v = buf.to_vec();
    let size = buf.len().next_power_of_two();
    let mut pad: Vec<u8> = vec![0x90; size - buf.len()];

    v.append(&mut pad);

    let mut enc = Vec::new();
    for i in 0..size {
        enc.push(Goldilocks::from(v[i] as u64));
    }

    let log_n = {
        let mut x = 0u32;
        let mut y = size;
        while y != 1 {
            y >>= 1;
            x += 1;
        }
        x
    };

    let omega = root_with_order_unchecked(1<<log_n);

    // Root of unity DOES matter in this case, since we need to decode through evaluations and not
    // through the FFT.
    serial_ifft(enc.as_mut_slice(), &omega, log_n);
    let mut ret: Vec<u128> = Vec::new();
    for i in 0..size {
        ret.push(u128::from_le_bytes(enc[i].to_repr().as_ref().try_into().unwrap()));
    }
    println!("This is the polynomial {:?}", ret);
    println!("Polynomial length is: {:?}", ret.len());
    println!("Decoding root of unity is: {:?}", omega);
}

pub fn eval_single<F: PrimeField>(a: Vec<F>, point: &F) -> F {
    let mut result: F = *a.last().unwrap();
    for i in (0..a.len() - 1).rev() {
        result = (result * *point) + a[i];
    }
    result
}

pub(crate) fn serial_fft<F: PrimeField>(a: &mut [F], omega: &F, log_n: u32) {
    
    #[inline(always)]
    fn bitreverse(mut n: u32, l: u32) -> u32 {
        let mut r = 0;
        for _ in 0..l {
            r = (r << 1) | (n & 1);
            n >>= 1;
        }
        r
    }

    let n = a.len() as u32;
    assert_eq!(n, 1 << log_n);

    for k in 0..n {
        let rk = bitreverse(k, log_n);
        if k < rk {
            a.swap(rk as usize, k as usize);
        }
    }

    let mut m = 1;
    for _ in 0..log_n {
        let w_m = omega.pow([(n / (2*m)) as u64]);

        let mut k = 0;
        while k < n {
            let mut w = F::ONE;
            for j in 0..m {

                let mut t = a[(k+j+m) as usize];
                t.mul_assign(&w);
                let mut tmp = a[(k+j) as usize];
                tmp.sub_assign(&t);
                a[(k+j+m) as usize] = tmp;
                a[(k+j) as usize].add_assign(&t);
                w.mul_assign(&w_m);
            }

            k += 2*m;
        }

        m *= 2;
    }
}

pub(crate) fn serial_ifft<F: PrimeField>(s: &mut [F], omega: &F, log_n: u32) {
    let invlen = F::from_u128(s.len() as u128).invert().unwrap();
    serial_fft(s, &omega.invert().unwrap(), log_n);
    for item in s.iter_mut() {
        *item *= invlen;
    }
}

pub(crate) fn root_with_order_unchecked<F: PrimeField>(order: u64) -> F {
    let mut size = order.next_power_of_two();
    let mut log_n = 0;
    while size != 1 {
        size >>= 1;
        log_n += 1;
    }
    let max_power_of_two = F::S;
    let mut g = F::ROOT_OF_UNITY;
    for _ in log_n..(max_power_of_two-1) {
        g = g.square();
    }
    g
}
